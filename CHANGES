$Id: CHANGES,v 1.14 2001/07/15 19:23:57 rcaputo Exp $

Revision history for POE
========================

Changes marked with "(!!!)" may break backward compatibility.

Version numbers have four fields: X.YYZZAA

  X  is the interface version, currently 0 as public interfaces gel.
  YY is the major revision number.
  ZZ is the minor revision number.  It's 00 for public CPAN releases,
     or nonzero for beta web site releases.
  AA is a testing revision.  It's usually 00, which means the tarball
     is a public release.  Nonzero versions are limited alpha level
     releases (development snapshots) for specific testers.

,------------------------------------------------------------------------------
| Hey, Rocco, don't forget to assign a tag to the release after you
| make dist on it!  0.0910 is ``v0_0910''!  For example:
|
| cvs tag -Rc v0_11   .
| cvs tag -Rc v0_1009 .
`------------------------------------------------------------------------------

0.15 2001.07.15
---------------

Added Philip Gwyn's patch to allow Filter::Reference to use data
marshallers with :: in their package names.

(!!!) This is a CPAN release.  Everything since 0.14 is also new to
people tracking POE on the CPAN.  See versions 0.1401 through 0.1404
for fun things, including some breakage.

Tweaked the TODO file, at least the part that everyone should read, so
it's friendlier or the mind.  I hope.


0.1404 2001.06.02
-----------------

Kirill found a bug in alarm_adjust(): it would corrupt/disorder the
alarm queue.  Added ASSERT_ALARMS to POE::Kernel::Select, ensuring
that the alarm queue stays in order-- or ELSE!

Added tests to t/02_alarms.t, tweaking the disordered alarm queue bug
in alarm_adjust().

Fixed alarm_adjust().  Optimized a little in _enqueue_alarm() while I
was there.

Coral spotted me using "either" to refer to three things in the
POE::Kernel manpage.  Corrected that bit of bad grammar.  If anyone
else wants to pick over the rest of the documentation for errors,
they'd better submit patches too.

I had no idea the files in the ./lib directory were being installed.
They were never meant to be, but MakeMaker was including that
directory by default.  Fletch pointed me to PMLIBDIRS, which I have
tweaked to prevent this from happening in the future.

Philip Gwyn found and patched a bug where setting (trace => 0) on a
session turned tracing on.  I fixed the same bug for (debug => 0), and
I fixed both options in NFA.pm also.

Philip Gwyn found a documentation bug in POE::Session, claiming that
STATE wasn't _default in _default handlers.  Fixed.

Matt Cashner pointed out extraneous noise in t/00_coverage.t, which
was subsequently squelched.


0.1403 2001.06.07
-----------------

Added POE::Kernel method alias_list() to return the alias(es)
associated with a particular session.

Documented alias_list(), and added tests to t/03_aliases.t

Changed case of Changes in NEEDS.

Added TODO to NEEDS.

Applied Philip Gwyn's patches to remove zero-width negative
look-behind assertions from lib/deptest.perl.  They were preventing
the dependency checker from running under 5.004_05.

Applied Philip Gwyn's patch to prevent t/18_filter_line.t from dying
outright when compiled regexps aren't available.  D'oh!

POE::Wheel::ReadLine also used a zero-width negative look-behind
assertion for an elegant single regexp that transposes words.  The
code that replaces it is 36 lines long, but it works with 5.004_05.


0.1402 2001.06.03
-----------------

Have the child process in Wheel::Run attempt to kill itself if
POSIX::_exit() isn't available.

Document a lot of requests and things in TODO.

Add alarm_set, alarm_adjust, alarm_remove, and alarm_remove_all to
POE::Kernel.  Add tests for these things in t/02_alarms.t.  Document
them in POE::Kernel's manpage.

Depreciate POE::Kernel's queue_peek_alarms() method.  The new alarm
functions let programmers add, remove, and track alarms by ID, so
looking into the alarm queue is no longer necessary.  The complete
depreciation schedule is in TODO.

Add POE::Kernel leak detection for alarm IDs.  Discovered a memory
leak in alarm IDs, and removed it.

Add POE::Kernel leak detection for signals, completing the suite of
global structure leak detectors.  Discovered and fixed a potential
memory leak in signals data structures.


0.1401 2001.05.28 (!!!)
-----------------------

(!!!) Tk postbacks must return 0.  Gtk postbacks must return 1.
Actually, Gtk postbacks might return 0, too.  The test relies on 0,
anyway, but mandrake says he needs postbacks to return 1.  I'm so
confused!  Leave Gtk's postback return value 0 for now, but it might
change later.

(!!!) Depreciation schedules and other notices have been moved to a
TODO file.  Please consult that file or be surprised later.

(!!!) Changes has been renamed to CHANGES to follow suit with MANIFEST
and README.

(!!!) Breakage warning!  XyzState parameters in wheels have been
renamed to XyzEvent and documented as such.  They are guaranteed to
work without warnings until ????.??.??.

Fix t/06_tk.t to skip if Tk is outdated, rather than fail.

Fix lib/deptest.perl to recognize Exporter on Solaris.

Increase dependency checking information on Solaris in case attempts
to fix the Exporter bug aren't successful.

Add XyzEvent support to wheels.  Code to support XyzEvent and XyzState
is marked with the comment C<# STATE-EVENT>.  Hooks for depreciation
warnings are also commented.  Changed the documentation to say
XyvEvent instead of XyzState, so new users will not learn the
depreciated ways.

Verified that the depreciation from State to Event does not break
existing tests.

Ported the existing tests to use XyzEvent instead of XyzState, and
verified that they still pass.

Added instructions for installing the ActiveState PPM to README.

Ported the samples from XyzState to XyzEvent, but they still are not
properly tested.

Add POE::Kernel methods detach_myself() and detach_child() to detach
the current session from its parent, or a child session from the
current one.  This breaks the existing parent/child relationship,
allowing parent sessions to be garbage collected if they're no longer
needed.  It resembles the fork/exec trick in Unix.

Added test t/25_detach.t to test detaching sessions.

Fixed a typo in POE::Kernel; the bareword "hostname" should be
$hostname, what with all the work Kernel does to set it properly.
Ray Brinzer's (SF: petruchio) keen eye spotted this one.

Win32's four-argument select() call fails when there are no
filehandles.  In this case, call sleep() instead.  Have Time::HiRes
import its own sleep() if it's available, so that subsecond sleeps
will work.


0.14 2001.04.23
---------------

Fix POE::Kernel::Tk.pm so that it doesn't kill CPAN.pm's "r" command.

Fix lib/deptest.perl: out of date dependencies were not correctly
reported on, and dependency version checking was broken.


0.13 2001.04.20
---------------

Add Dieter Pearcey's Stackable filter, allowing ReadWrite (and other
wheels) to pass data through two or more filters.  Stackable comes
with other helpful filters: Map and Grep to transform data while it's
still in a filter stack, and RecordBlock to group several records into
a block of them.

Add t/24_filter_stack.t as a start for testing stackable filters.
This so far is the only sample code for using these filters, and it's
not very friendly in that regard.

Add ASSERT_USAGE.  Setting this POE::Kernel debugging constant causes
it to check the values passed to its parameters and croak if they're
bad.

(!!!) David Huggins-Daines discovered that POE versions 0.1205 and
later don't work with older Tk versions.  Make the Tk substrate fail
if it's working with an older Perl-Tk library.

(!!!) Gtk+ does not require a top-level window in order for POE to use
its event loop.  Furthermore, Mandrake says it's common for Gtk+
programs not to have any given "main" window which closes a program
when it's destroyed.  POE::Kernel no longer creates a top-level window
when using Gtk+, and it has a new method, signal_ui_destroy, which can
be used to fire UIDESTROY when some arbitrary widget is destroyed.
See the POE::Kernel documentation.

Tk requires at least one widget to use the event loop, so POE::Kernel
continues to create one and set $poe_main_window when Tk is in effect.

(!!!) Depreciate support for coderefs in SocketFactory's SuccessState
and FailureState parameters.

Applied Peter Scott's code/doc/test patches to allow Wheel::Run to
fork off coderefs instead of new programs.

David Huggins-Daines pointed out that Sys::Hostname, while it's
improved in 5.6.0, is pretty poor in prior perls.  Added a manual
POSIX::uname check in POE::Kernel.

Peter Scott pointed out that Wheel::Run won't flush output to a child
process' STDIN unless a StdinEvent parameter is included.  Changed
Wheel::Run to flush to the child's STDIN handle even without
StdinEvent.

Added an Alias parameter to POE::Component::Server::TCP so that it can
receive events from other sessions.

Added a 'shutdown' event handler to POE::Component::Server::TCP.
Combined with the component's alias, this lets some other session shut
down a server.

Began using SourceForge's compile farm for cross-platform testing.
The time reduction in POE's signal tests was too aggressive, causing
some problems on the Debian test system.  Increased the delay a little
bit.

Add POE::Wheel::Curses to provide non-blocking input for Curses
programs.


0.1206 2001.03.23
-----------------

Enhance POE::Preprocessor to track macros and constants per package.
Now multiple files sharing the same package also share the same macros
and constants.

Split event substrates into other modules.  It seems like the right
thing to do at the moment.

Karsten Sperling found that POSIX::uname wasn't supported back on
5.005_02 for Win32, but Sys::Hostname is.  Applied Karsten's patch to
use Sys::Hostname, which uses POSIX::uname internally wherever
possible, instead.

Replaced many enum/const statements with constant subs.  Fewer of
these mean less regexps to run against the source code, so startup
should be a little peppier.

Made more Kernel data structures package lexicals.  Runtime should be
slightly quicker.

Remove Exporter use from Kernel and Session, although other modules
like Carp already use it, so it gets loaded no matter what.  I'm about
tapped for startup-optimizing ideas that don't involve rewriting
POE::Preprocessor.

Removed the object layer; files are being restructured as a separate
component.  This is ahead of schedule.

Added POE::Wheel::ReadLine.  This is a Term::ReadLine subset that
cooperates with POE.  Now how do I test it non-interactively?

Remove documentation in POE::Filter::Line and ::Block saying their
put() methods can be used with single logical records.  They can't.

POE::Preprocessor would make regular expressions like /(|a|b)/ when a
sub-expression was optional.  Tweaked it to generate /(a|b)?/ instead.

Rearranged the README sections in an effort to make it more readable.

Fix samples/tk.perl to use C<$poe_main_window> instead of the older
C<$poe_tk_main_window>.  I'm surprised this was overlooked so long.

Eliminated spurous CHLD signals generated by Sys::Hostname.

Some tests have built-in delays.  Reduce the amount of time they take
to run on fast systems.

Stop pausing alarm watchers unnecessarily.


0.1205 2001.02.12
-----------------

Added TRACE_RESULTS to lib/TestSetup.  One of the tests in 0.1204 hung
on a user's machine, and it was impossible to figure it out remotely
without first seeing which test hung.

Solaris wasn't setting termios parameters without TCSANOW.  Wheel::Run
wouldn't work in pty mode because the terminal parameters weren't
being set.

Make Wheel::Run's pty conduits run in "raw" or cbreak mode.

Rob Bloodgood found some POD breakage; C<=item>s without blank lines
between them, and things like that.  Patch applied, and I went through
everything and cleaned up some trailing whitespace (none of it
significant) just for kicks.

Newton Brown found a bug in POE's Tk support, which turns out to be a
known issue with Tk's fileevent mechanism.  Thanks to "good_call" via
usenet news for pointing me at
<http://www.xray.mpe.mpg.de/mailing-lists/ptk/2000-12/msg00060.html>,
which explains fileevent's pitfalls and provides their work-arounds.

Oh.  I added a test to t/06_tk.t to exercise the fileevent bug.

Added Tk workarounds to make the new failing tests pass.  Hooray!

Added file/line reporting in Session's trace option, so the sources of
events are now reported.

Apply a bunch of notes Rob Bloodgood sent in about the postback
documentation in POE::Session.

Added ReadWrite methods: get_input_filter and get_output_filter, so
that filters' methods can be manipulated directly.


0.1204 2001.01.13
-----------------

Fletch pointed out that SunOS has a psrinfo command to describe a
Sparc's processors.  Excellent!  Updated the README.

Added IO::Pty support to Wheel::Run.  Skip the Pty tests if IO::Pty
isn't available, so's not to break testing for people without it.

Torvald Riegel pointed out that POE::NFA's goto_state() method
required an entry event.  The documentation says it's not mandatory,
so I added his patch to make it optional.

Added a STATE parameter to POE::NFA event handlers.  STATE contains
the name of the machine's current state.

Added a get_current_state() method to POE::NFA.  It returns the
machine's current state's name.

Added t/23_nfa.t to exercise bits of POE::NFA.

Added code to prevent session IDs from colliding after integer
increment wraps.

Devolped a depreciation schedule for some iffy current features and to
make the names of things more consistent.

Added TRACE_RETURNS and ASSERT_RETURNS to generate warnings and/or
hard errors whenever a Kernel function will return an error.

Updated POE::Session's postback() documentation based on user
feedback.  Thanks again to Rob Bloodgood.

Rob Bloodgood sent in a patch for POE::Component::Server::TCP to let
it bind to specific interface addresses.  The default behavior is the
same as before: bind to INADDR_ANY.


0.1203 2000.12.29
-----------------

Very minor optimization to Gtk read/write resuming.  Replace Gtk's
noisy warning about resuming unpaused handles with quiet acceptance.

Added POE::Pipe::OneWay, a portable way to create one-way pipes.  It
tries pipe first, then unix domain socketpair, then inet sockets
before failing.

Added POE::Pipe::TwoWay, a portable way to create two-way pipes.  It
tries unix socketpair first, two pipes, then inet sockets before
failing.  It can be more frugal with filehandles than two one-way
pipes.

Added Wheel::Run, an open2/open3 style wheel that lets sessions spawn
off background processes.  It takes care of the whole pipe, fork, exec
deal.

Removed lib/TestPipe and replaced all its uses with either
Pipe::OneWay or Pipe::TwoWay.

Added &many_ok to TestSetup so that lots of tests can be marked ok at
once.  More importantly, lots of them can be marked as skipped in one
swell foop.

Added t/22_wheel_run.t to test uni- and bidirectional pipes, plus the
Wheel::Run wheel which uses them.


0.1202 2000.12.26
-----------------

Happy Boxing Day!

Revised nearly all the documentation.

Documented FollowTail's SeekBack parameter.  Whoops!  Changed
FollowTail's object implementation from a hashref to a listref while I
was in it.

Added a conceptual cross-reference to POE's "SEE ALSO" section, so now
it acts as a table of contents for the entire distribution.  Pointed
all the other SEE ALSOs at it.

Replaced a stupid regexp in POE::Preprocessor with a faster one.

Fixed a couple spots in SocketFactory where the conversion from
hashref to listref was incomplete.  Thanks to Rob Bloodgood!

Added wheel IDs to the events ListenAccept emit.  Changed
ListenAccept's object implementation from a hashref to a listref.


0.1201 2000.12.15
-----------------

Added a program, lib/deptest.perl, which tries to determine and test
the distribution's dependencies.  If any are missing, it reports them,
and it may stop the module from being installed.

Tentatively moved POE development to SourceForge (project name: "poe",
at <http://sourceforge.net/projects/poe/>).  I'm really regretting it
at the moment: SF is experiencing severe growing/moving pains, and all
sorts of things have been broken.

Documented the object layer depreciation.  The object layer will be
moved to a separate component after 0.13 is released.  [note: Decided
to remove it early.]

Documented the samples depreciation.  They will be moved to a separate
distribution after 0.13 is released.

Moved POE::Kernel's data structures out of $self and into lexicals.
Kept references to the structures in $self so Data::Dumper can dump
the whole shebang at once.

Mike Fletcher found a bug in the TRACE_SELECT code that kept it from
showing the input bits for read select.  D'oh.

Fixed Wheel::SocketFactory to prevent it from clobbering another
wheel's selects upon destruction.  This fixes the longstanding "wheel
swap" bug listed in the FAQ (on the web site).  Replaced its blessed
hashref with a blessed listref, so it should be a wee bit faster too.

Fixed t/10_wheels_tcp.t to stop working around the longstanding "wheel
swap" bug.  This exercises the previous SocketFactory fix.

Dave Paris found a recurring bug in t/04_selects.t.  It was opening
40-some filehandles at once, which consistently runs out of available
handles in some situations.  I cut the number of handles approximately
in half, so it should work better everywhere.  This has the
unfortunate side-effect of cutting 10 tests from the suite.  We're
still not sure how the environment is using extra handles, though.


0.12 2000.11.19
---------------

This is a big shout out to all my homies on the CPAN.  Yo yo yo!

Added nick collision prevention and a /quit command to
tutorial-chat.perl.

Removed the "to do" list from Changes.

Added the 'heap' parameter to POE::Session->create().  Documented it,
too.

Fixed a condition where the Kernel would not exit.  This happened
whenever a session with extra reference counts was forcibly stopped.
The session would clean up and exit, but the Kernel's master "extra
references" count was not decremented.  The Kernel had thought that
there was still activity going on, so it wouldn't exit.  The biggest
symptom of this problem was Gtk/Tk apps not exiting when they ought
to.

Removed &sub from lib/Devel/Trace.pm because it was causing some of
the tests to fail.  It doesn't seem to hurt anything by being gone.
Thanks to Nejiteepu for hitting me with the bludgeon of reason on it.

Removed the $SIG{ALRM} kludge from t/01_sessions.t; it's not needed
now that &sub is gone from lib/Devel/Trace.pm.

Added tests for &Kernel::get_active_session and &Session::get_heap().

Exercise more code in the tests, including some error conditions.


0.1110 2000.11.11 (!!!)
-----------------------

Added ARG1 to Wheel::ListenAccept's AcceptState parameter.  This
contains the accept() call's return address.

Cleaned up and tested the samples.  They all should work with the
latest version of POE.

The InterMezzo team contributed &POE::Kernel::select_pause_read() and
&POE::Kernel::select_resume_read().  Added and documented them.

The InterMezzo team contributed &POE::Kernel::get_active_session() and
&POE::Session::get_heap().  Added and documented them.

(!!!) The InterMezzo team suggested replacing exists() parameter
checks with defined().  The change will make undefined parameters (in
the form C<Parameter => undef>) look like they were not passed.  This
simplifies code in some cases while not complicating it anywhere.  In
most cases, this change should not alter the way existing code
behaves.  It's sweeping enough, however, than I've marked it
compatibility-breaking just in case.  Modules affected: FollowTail.pm;
ListenAccept.pm; ReadWrite.pm; SocketFactory.pm; Block.pm; Line.pm;
SysRW.pm.  Note, however, than undefined InputLiteral in the Line
filter has a special meaning, so its exists() check was retained.


0.1109 2000.10.30
-----------------

Revised large chunks of POE::Preprocessor.  Added conditional code
inclusion on the assumption that not performing macro substitution and
compiling code we don't use will be faster.  This could well be false.

Added DEBUG_INVOKE and DEBUG_DEFINE to POE::Preprocessor, mainly so
the defining and invoking output doesn't clutter up DEBUG'S.

Revised POE::Kernel to use conditional code inclusion instead of
optimized-away optrees.

Revised t/05_macros.t to test conditional code inclusion.

Revised t/01_sessions.t to time out in coverage tests.  Previously,
the tracing library would cause some subtle hang.

Revised the coverage testing tools to cope with conditional code
inclusion.  Conditional code inclusion inside macros changes line
numbers no matter what I do, so the coverage report has to cope.

POE::Preprocessor didn't allow consts which weren't all-caps; now it
does.  Also permit consts which aren't all letters.  This allows a
crude sort of operator overloading.

Lifted most of Ilya Zakharevich's nifty Text::Trie to rewrite the
regexp optimizer in POE::Preprocessor.

Added POE::NFA, the nondeterministic finite automaton flavor of
POE::Session.

Tweaked test t/00_coverage.t to load each module in a separate
package.  POE::NFA and POE::Session both export constants which
overlap.

Tweaked POE.pm to load Session by default.  If NFA is specified, it
overrides Session.  This should prevent accidentally loading Session
and NFA at once.


0.1108 2000.10.06
-----------------

Added Gtk support.  Added t/21_gtk.t to test it.

(!!!) Broke Tk backward compatibility.  POE supports different X
toolkits now, so it's silly to export ${"poe_$toolkit_main_window"}
for each.  Renamed $poe_tk_main_window to $poe_main_window.  Both Tk
and Gtk use it for the top-level/main window.

(!!!) Broke Tk backward compatibility again.  POE supports different X
toolkits now, so it's silly to have a separate DESTROY signal for
each.  Renamed TKDESTROY to UIDESTROY, and both Gtk and Tk use it.

Updated POE::Kernel docs.


0.1107 2000.10.04
-----------------

Document POE::Preprocessor's debugging constants, and allow them to be
overridden by defining them before POE::Preprocessor is used.  This is
the same scheme that POE::Kernel's TRACE/ASSERT constants use.

Philip Gwyn thinks SIGCHLD was broken after 0.1104, so I've
restructured test programs 11 and 12 (POE and Event signal watchers).
Child process death is synchronized by the parent program (read:
SIGINT) instead of with sleep and Time::HiRes.  They ought to die
closer together now.


0.1106 2000.09.01
-----------------

(!!!) Wheels always return object references now, even if they fail.
This may break programs that rely on some wheels' (most notably
SocketFactory's) new() methods returning undef when they cannot be
created successfully.  This change was necessary to complete the
wheels-have-unique-ids change also in this version.

Wheels have unique IDs now.  These IDs are included in every event
generated by a wheel, and they're accessible with the $wheel->ID()
method.  It's now possible to determine which wheel generated which
event, which is useful if you have several wheels in the same session.

Many of the tests determined whether a wheel succeeded by its
constructor's return value.  Revised them to fail if error events are
thrown.


0.1105 2000.08.24
-----------------

Updated README and POE's main manpage to point to the new mailing list
and web addresses.

Added a note about using the same versions of the same modules when
passing messages across different machines.  Differences in modules or
versions can introduce some pretty subtle and nasty problems.

t/19_filterchange.t wouldn't work without Storable.  Made it use
lib/MyOtherFreezer instead, so at least filter changing can be tested.

Bypass alarm(3) calls in lib/TestPipe.pm when trying to create
non-blocking pipes on MSWin32 systems.

Bypass DISPLAY environment variable checking in t/06_tk.t on MSWin32
systems.  Perl/Tk doesn't seem to use DISPLAY there.

Made the tests' missing module messages more comprehensible.
Hopefully they'll have a lesser tendency to be mistaken for test
failures now.

Skipped UNIX domain sockets tests on MSWin32, which seems not to
support them.

Skipped signals tests on MSWin32, which doesn't seem to do signals.

TRACE_PROFILE output was mixed across STDERR and STDOUT.  Put it all
on STDERR.  evilPetey's got a good evilEye.


0.1104 2000.08.12
-----------------

Jaxdahl donated some shell time on his Win32 machine, allowing me to
figure out why POE was failing miserably with ActiveState's Perl port.
I made a bad assumption about source code newlines in
POE::Preprocessor.

Wheel::ListenAccept wasn't as lagged behind Wheel::SocketFactory as I
had thought.  It required only minor changes to be brought up to date.

Skip some tests on Win32 because pipes can't be made non-blocking
there.

Brian Buchanan found and fixed a problem where SIGCHLD would not be
delivered when child processes exited by signal.

Added t/20_accept.t to test Wheel::ListenAccept.

Wrote lib/TestPipe.pm.  This file tries to make a portable two-way
pipe.  It uses a pair of pipe(2)s, or a plain INET socket if that
fails.  This would make a great basis for an open3 thingy.


0.1103 2000.08.06
-----------------

Addi provided an algorithm for automatically detecting incoming
newlines in Filter::Line, and we both implemented it in parallel.  The
best bits of both implementations are in POE::Filter::Line; see the
documentation for how to enable this nifty feature.

Addi caught on that long lines in samples/filterchange.perl were
wrapped by some misguided program.  I reformatted the source so that
no lines are longer than 79 columns, just in case.

Made Wheel::ReadWrite carp about unknown parameters.

Added t/19_filterchange.t to test filter changing between every filter
that supports the get_pending() method.  This test does its damnedest
to make some sort of pipe, trying socketpair and pipe calls before
failing.  The code here could be a good basis for an open3 thing.

Tweaked the timing on t/11_signals_poe.t and t/12_signals_ev.t.  These
tests now take about a minute and a half each everywhere, but the
results are more consistent across the spectrum of system speeds.

Added a message to t/06_tk.t to let anyone paying attention to the
test terminal know that a Tk window will pop up.


0.1102 2000.07.27
-----------------

Dennis Taylor supplied a Filter::Line patch that allows new newline
regexps.  Bits of his patch relied on perl 5.005 or newer, so I wrote
around them.  I also added the ability to specify incoming newlines as
literal strings, and it's now also possible to change the outbound
line terminator.

Added t/18_filter_line.t to test the now multi-faceted Filter::Line.

Tweaked the way t/06_tk.t skips so it doesn't look like my problem.


0.1101 2000.07.26
-----------------

This public release also contains the changes found in private testing
releases 0.110001 and 0.110002.  Please see the changes in those
revisions as well.

A peculiar sort of memory corruption is occurring when POE 0.11 is
running under perl 5.6.0 (not perl-current, it seems) and Perl/Tk
800.021 (and 800.022).  One specific string encounters a substitution,
in the same place but at random times.  It seems that its "->"
substring is being changed into "-<", which causes samples/tk.perl to
fail quietly.  Changing the substring to "-!>" `fixes' the problem, as
does removing the arrow altogether (which is what I eventually did).
I don't know why it's happening, and close scrutiny seems to make the
problem go away.


0.110002 2000.07.23
-------------------

This is a private testing release for a single person.

Tweak samples/tk.perl.  Add labels to the different fields, add a
counter to run in the background when the window loses its focus, and
add a _default state to catch misnamed events.  This is part of a bug
hunt in Wheel::FollowTail.

It seems to be a Bad Thing to set a Tk callback from a Tk callback of
the same type.  I had discovered this early on with the Tk afterIdle()
callback that drives POE's FIFO queue, but the problem didn't occur
with the Tk after() callback that drives POE's alarms.  Well, the
deadlock does occur for alarms, but it only happens when they're
scheduled for sooner than the current callback returns.  I've changed
the Tk after() callback to reset itself from a Tk afterIdle()
callback, making this a two-phase sort of flip-flop thing like the
afterIdle() callback.  (The afterIdle() callback resets itself from an
after() callback scheduled for 0us hence.)

Added debugging and coverage code to the MANIFEST: lib/Devel/Null.pm;
lib/Devel/Trace.pm; lib/coverage.perl.


0.110001 2000.07.21
-------------------

This is a private testing release for a single person.

Supply a Tk::Event::IO::SEEK in Wheel::FollowTail, since FollowTail
needs sysseek, which calls SEEK, and Tk::Event::IO doesn't include
one.  Use sysseek in FollowTail to clear the eof indicator, but wrap
it in a block eval for times when one oughtn't be seeking.

sysseek(2) can seek back past the start of a file on some systems.  Do
some extra gyrations in Wheel::FollowTail to prevent its SeekBack
parameter (or the default) from seeking back farther than the file's
start.

Added samples/neural-net.perl.  Crysflame was lamenting over perl's
threads, and he needed parallel computing for a neural network he
wanted to write, so I wrote this prototype/tutorial for him.  Not
knowing much about neural networks, it's pretty useless.  It does show
off POE for pseudo-concurrency, though.

POE::Filter::HTTPD relied on HTTP::Response's as_string() method
returning something that could be shipped to a web browser as-is.
This was wrong: as_string() returned the entire HTTP response okay,
but the headers were generated with "\n" newlines instead of network
ones ("\x0D\x0A").  The result is that pickier browsers such as MSIE
and Lynx were displaying the HTTP headers as part of the content.
Bleah!  Stole HTTP::Response's as_string() method, and fixed the code
up a bit.

Addi pointed out that a "fixme" (comments indicating a bug) in
samples/httpd.perl was fixed in 0.100201, so I removed it.


0.11 2000.07.12
---------------

A-mused found samples/thrash.perl failing on Redhat 6.0.  The chain of
events goes something like this: (1) select says a non-blocking
connecting socket's ready for writing.  (2) getsockopt(SO_ERROR)
reports that the socket is fine.  (3) getpeername returns undef, and
$! becomes ENOTCONN.  (4) unpack_sockaddr_in predictably fails.
... The same test passes on other machines, including Solaris 7, OS/2,
and FreeBSD 4.0-STABLE.  I patched SocketFactory to report an error if
getpeername fails, and this cleared up the failure's symptom.


0.1011 2000.06.29
-----------------

Added t/17_filter_ref.t: 80 tests for Filter::Reference.

Removed an errant diagnostic from t/11_signals_poe.t; thanks a-mused.

The garbage collection tidy in 0.1008 had broken GC in certain
instances.  The problem didn't show up anywhere but the queue.perl
sample, as far as I can tell.  I think it's corrected now.

69% test coverage now.  Check the README for stats.


0.1010 2000.06.20
-----------------

Wheel::FollowTail was working on its filehandles before setting them
non-blocking.  Rearranged a couple lines of code to turn off blocking
before working with filehandles.

Tweaked the signals tests to wait longer for child processes to
terminate.

(!!!) I have nothing good to say about POE::Kernel's experimental
fork() method, so I will refrain from saying anything more than "It
has been removed."  Please use plain fork(2).

(!!!) Added variable-length block support to Filter::Block.  In this
mode, each item will be received the same as it was put().  This
borrows heavily from Filter::Reference which did it first.  Oh, the
"!!!" is because Filter::Block's new() method doesn't default to
512-byte blocks anymore; an unspecified/undefined BlockSize enables
variable-length blocks, and a <1 BlockSize is an error.

Added a new test, t/15_filter_block.t to exercise the block filter.

Made Filter::Stream's put() method copy the chunks it's given rather
than pass them on by reference.  This seems to be the safest thing to
do, but I'm not sure why I think so.

Added a new test, t/16_filter_stream.t to exercise the stream filter.


0.1009 2000.06.17
-----------------

(!!!) Documented in the changes for 0.1006 that $kernel->fork() was
broken.

Added Filter::Block to 00_coverage.t.

Added t/14_wheels_ft.t to test Wheel::FollowTail and Filter::Block.

FollowTail would go into an infinite loop while discarding initial
data.  It wasn't checking drivers' get() methods' return values for
emptiness.

Driver::SysRW's get() method wasn't checking sysread's return value
for definedness.

Dieter Pearcey sent in a patch to FollowTail that lets programs
specify how far to seek back into a file before tailing it.  When
SeekBack is used, everything up to the current end of file is
returned.  These changes look okay, but they are not yet tested.
samples/followtail.perl still works, which is encouraging.

Dieter Pearcey also submitted Filter::Block, a fixed-length block
filter.  This filter is not yet tested.

Translated Filter::Block's internal object into an anonymous list
reference.  This will be more efficient, and I understand Dieter's
application may need it.

Windows compatibility seems to have gone all to heck in this version.
I'm not sure why, either, since I didn't do anything specific to
Windows but enhance its support.

Tweaked POE::Preprocessor to do something approaching right things
when debugging or tracing are turned on.

Optimized away a function in lib/TestSetup.pm.

Added t/13_wheels_udp.t and a corresponding MANIFEST entry.

Jonathan Feinber graciously loaned a Windows NT shell for testing and
development, opening whole new worlds of pain to me.  :)

Tweaked the Win32 FIONBIO ioctls for non-blocking filehandles in
POE::Kernel and POE::Wheel::SocketFactory.

Added t/00_coverage.t to the MANIFEST.  Whoops!

Added a crucial newline between 1; and __END__ in POE::Session.

Jonathan Feinber reported that ActiveState 5.6.0, build 613 doesn't
implement F_GETFL and F_SETFL.  These constants aren't used for the
MSWin32 code, so now POE::Kernel and POE::Wheel::SocketFactory define
dummies for them.


0.1008 2000.06.14
-----------------

Tidied Session garbage collection tests.

Stopped setting $SIG{CH?LD} handlers when using Event.

The wheels tests were failing on DOSISH systems because the 1-byte
blocksize generated fake newlines.  CR and LF coming in separately and
being interpreted as two newlines.  Increased the BlockSize so this
won't happen.

Prevented the TKDESTROY signal from being fired if POE finishes before
Tk does.  There's nothing to receive the signal!

Enhanced the "# line" directives that POE::Preprocessor injects into
macros.  Now they're added when macros are used; this enables them to
include not only the macro name and line number but also the source
file and line number.  For example: "Use of uninitialized value in
concatenation (.) at macro ssid (line 1) invoked from POE/Kernel.pm
line 1007."  This doesn't nest, though.

Added a postback test to t/06_tk.t, discovering in the process that
the postback's blessed coderefs were part of POE::Session::postback's
code tree and thus not being DESTROYed when Tk::After was done with
them.  I thought this might be a Perl bug and posted to perl5-porters
about it.  Wolfgang Laun and Nick Ing-Simmons sent back enlightening
replies, and the game once again is afoot!


0.1007 2000.06.07
-----------------

Version 0.1006 was put on the web site, but ignatz found a bug in
SocketFactory that prevented t/09_wheels_unix.t from passing on
Linux machines.  a-mused confirmed that the problem appears on Linux
but not Solaris.  My own FreeBSD system was not affected.  The bug
relates to calling getpeername on UNIX domain sockets.  The resulting
unpack_sockaddr_un call would fail when getpeername returned an
undefined (not undef) value.  The failing code is now wrapped in
eval, and it will gracefully recover from this sort of error.

Many thanks to ignatz and a-mused for quick testing, and to Fletch
for verifying that 0.1007 works on RedHat 6.2 x86!


0.1006 2000.06.07
-----------------

This version was placed on the web site, but a-mused and ignatz found
bugs SocketFactory right away.  As a result, I held off announcing it
to the mailing list until a fix could be included.

Added t/12_signals_ev.t to test Event's SIGCHLD handler.  It's pretty
much the same as t/11_signals_poe.t, but using Event or skipping itself
if Event is not available.

Increased the time that t/11_signals_poe.t waits to reap children.  On
memory- and cpu-challenged systems, swap times could delay process
exits, causing false failures when the test program timed out.

Fimmtiu discovered why it's bad to post _start yourself, and I decided
it would be best for everyone to document it.

Philip Gwyn patched POE::Kernel to unwind SIGCHLD reaping loops.  This
greatly reduces the amount of work done in POE's stock $SIG{CHLD}
handlers which in turn reduces the probability that SIGCHLD will
segfault Perl.  Note, however, that the chance of this occurring will
remain nonzero as long as Perl is not signal safe.  (Also, the patch
wouldn't apply and I sort of redid the code as I spliced it into the
the Kernel.  I'll know when Philip tests it whether I've broken his
algorithm.)

(!!!) $kernel->fork() was broken during the SIGCHLD revision.

Tweaked postbacks.  Older Perl versions were not doing the right
things with \@_ in POE::Session's postback() method.  Replaced it
with [ @_ ] instead.

Expanded t/02_alarms.t to test the big-queue binary search and insert
code.  Previous tests didn't expand the alarm queue past the maximum
threshhold for linear insertion.

Macro-ized some of the redundant bits between the Tk and Event code.

Normalized the names of some functions; added leading underscores here
and there.

Added test coverage information to the README.

Added t/09_wheels_unix.t to test Wheel::ReadWrite and
Wheel::SocketFactory against UNIX domain sockets.  This will fail
terribly wherever UNIX sockets aren't supported; I should skip it on
platforms where people complain about its failure.

Added t/10_wheels_tcp.t to test Wheel::ReadWrite and
Wheel::SocketFactory against INET/TCP sockets.

Added t/11_signals_poe.t to test POE's stock signal handlers.  These
are Perl's own signal handlers, and all the caveats apply.

Added Exporter; TestSetup exports its functions now.  TestSetup use
syntax changed, so I added &test_setup to set things up instead of
&import.

Added &ok, &not_ok and &results to buffer and report on the results of
tests that occur in indeterminate orders.

Added TestSetup functions stderr_pause() and stderr_resume() to turn
STDERR off and back on when testing code known to show diagsonstics.

Added ID resolution tests to t/03_aliases.t.

Added the kernel's ID to its ID-to-session lookup table, so that
$kernel->ID_id_to_session($kernel->ID) would return $kernel.  It's
silly but complete now.

Added t/08_errors.t to test error conditions, something that the other
tests never covered.

Added lib/Devel/Trace.pm.  This is a custom debugging module (used
with -d:Trace) that collects information about runnable Perl
statements and the ones actually called.  It's only used for reporting
on test coverage during development and isn't installed.

Added lib/coverage.perl.  This program runs t/*.t with -d:Trace to
collect coverage statistics; then it gathers up the results and writes
a report.

Added t/00_coverage.t to load every "released" module so that the test
coverage report can learn the set of all testable modules.

Philip Gwyn pointed out that waitpid() returns 0 on some platforms to
indicate outstanding child processes that haven't yet exited.  I was
treating 0 as a valid PID.  The waitpid() return value checks are
fixed now.

Fletch found all sorts of badness in POE::Kernel's fork() method and
related polling loop.  It boiled down to bad assumptions about
$SIG{CHLD} = 'IGNORE' and a stupid use of keys() without scalar().

(!!!) Revised the Changes for 0.0906, dated 2000.02.20 to note an
interface change in Wheel::ReadWrite's put() method.  This Changes
change isn't a compatibility issue, but the original change is.

POE::Preprocessor adds "# line" directives so that macro expansions
don't break line numbers in warnings and errors.  Unfortunately, this
badly breaks -d modules, such as the debugger and various profilers.
So now POE::Preprocessor omits "# line" directives when -d is used.
This'll let you see everything being run, at the expense of correct
line numbers.

Added a rudimentary signals test to t/01_sessions.t, which uses POE's
own event loop.

Added a rudimentary signals test to t/07_event.t, which uses Event's
event loop.

Will not add a signals test to t/06_tk.t.  Tk does not have its own
signal watchers, so this would only test POE's.

Made minor revisions to the tiny and relatively new POE::Preprocessor
documentation.


0.1005 2000.05.23
-----------------

I forgot to document POE::Session's constructors.  Oops!  Now they are
documented.

Rewrote the POE::Wheel POD.

Found the Perl symbols that weren't being exported for OS/2 and AIX
(and maybe Windows).  Fixed makedef.pl to export them, and now Event
builds and tests ok.  Sweet!  Added initial Event support to
POE::Kernel and removed the Event caveats throughout POE's
documentation.

Added t/06_tk.t to test Tk support.  This tests file, idle and after
events.  It does nothing with signals, which Tk doesn't handle, and
nothing heavy duty.  Tk support is functional but still experimental.

a-mused pointed out that samples/tk.perl wasn't stopping its alarm
counters when it ought to.  This turned out to be a problem with
POE::Kernel's delay() method not clearing timed events.  Fixed!

Turned the idle kernel check into a macro, and used it not only from
POE::Kernel's run() method but also from the Tk and Event callbacks.
Before this, IDLE would never be posted when using Tk or Event.

Enhanced TestSetup (used privately by the t/*.t tests) to skip entire
test files when given 0 for the number of tests.

The Tk version of POE::Kernel's run() method would never exit, even
when there were no more sessions.  This has been fixed, after much
guts wrangling.

Added t/07_event.t to test Event support.  While this is a proper test
of Event's timer, io and idle events, it doesn't cover signals or any
heavy duty tasks.  Thus the Event support is functional but still
experimental.


0.1004 2000.05.21
-----------------

Rewrote the POE, POE::Kernel and POE::Session PODs.  Documented Tk
support.  Documented Event support, but it's not in yet.

t/04_select.t assumed that two-argument syswrite was legal, but it
isn't back in 5.005_02.  Added a length() call to make it legal on
older perls.  Thanks again, a-mused!

alarm_add() would enqueue an alarm for an undefined state.  Fixed it
to ignore such requests.

The call() method did not reliably set $! to zero on success.  Now it
does.

(!!!) Added parameter checking and return values to the timed event
functions: alarm, alarm_add, delay, and delay_add.

(!!!) alarm() and alarm_add() no longer clip past times to time(2).
Instead, events posted for the past will be entered into the
appropriate places in POE's time-ordered alarm/delay queue.  The
obvious results will occur.

(!!!) Changed POE::Kernel::alias_* to return 0 on success or an error
code on failure.  They no longer touch $!.

(!!!) Changed POE::Kernel::state to return 0 on success or an error
code on failure.  It no longer touches $!.

(!!!) Changed POE::Kernel::refcount_(in|de)crement to return the new
reference count on success or undef on failure.


0.1003 2000.05.12
-----------------

Addi found a list of Win32 error codes, including the elusive
EINPROGRESS.  I changed the dummy value to the correct one in
POE::Kernel and POE::Wheel::SocketFactory.  Now SocketFactory works on
Win32, in perl 5.005_03.  Mileage may vary as MSWin32 perl evolves.

I finally found a system where Perl/Tk builds.  This isn't a comment
on Perl/Tk (which is huge to build; 77 megs!) as much as it is on
the state of its OS/2 port.  The samples/tk.perl example program is
working!

Documentation is still lagging behind development at the moment, but
I should have more time to focus on it now that the Tk support is in
open beta on the 'web site.

Since 0.100201 was a private beta for Win32 support testing, and maybe
two people at most have seen it, you should give its section of the
Changes a look.


0.100201 2000.05.10
-------------------

This is a private release, 0.10_02_01, for Addi.  He's been having
trouble with POE and POE::Component::IRC on Win32.

Found a bug in Wheel::ReadWrite that prevented separate InputHandle
and OutputHandle from working correctly.

Finished initial Tk support.  Posted/yielded events, alarms/delays,
and selects are now handled through the Tk event loop, if Tk is used
before POE.

Philip Gwyn has noticed POE leaving zombie processes behind.  This was
traced back to naive signal handlers for $SIG{CH?LD} and the
$kernel->fork() "safe" polling code.  Both handlers have been changed
to use waitpid() and loop until all children have been reaped.

Deleted $POE::Kernel::{signal} before defining &POE::Kernel::signal.
As of 5.6.0, perl warns of a redefined function, even though it's
supposed to be called as a POE::Kernel method.  Grrr.

Addi pointed out that the PREREQ_PM line for Filter was incorrect.  It
should be requiring Filter::Util::Call 1.04.  Fixed!

Addi also noted that the Perl debugger sets $SIG{BUS} under MSWin32.
MSWin32 doesn't support a $SIG{BUS}, so POE dies when it grovels
%SIG's keys to register handlers.  Bleah!  POE::Kernel now avoids
$SIG{BUS} on MSWin32 systems.

Fixed a bug that Addi found in Wheel::SocketFactory.  SocketFactory
needed code to manage temporary states.  These states are created from
coderefs which are passed to the SocketFactory constructor instead of
state names.  Anyway, to do this, SocketFactory instances needed to
register and remove success and failure states from sessions that own
them.  Unfortunately, they deregistered states even when they were
passed by name, removing the owning session's states without its prior
consent or knowledge!  Even more troublesome, if the event is a result
of constructor failure, then the SocketFactory instance dies (and
deregisters the FailureState) before the failure event can be
delivered.  The upshot is: Bind errors in samples/httpd.perl never
displayed an error message.

Randal Schwartz wanted examples of programs that used job queues, so I
banged out samples/queue.perl.  Cleaning it up, documenting it, and
including it in the POE distribution took longer than writing it. :/

Updated the README to point to a new CPAN Testers location.

Added samples/tk.perl, in case anyone wants to try the Tk code in
POE::Kernel and POE::Session.


0.1002 2000.04.20
-----------------

Added t/05_macros.t to test POE::Preprocessor.

Split the event queue into a FIFO for plain state transitions and a
time-ordered priority queue for alarms.  This puts POE one step closer
to coexistence with Tk and Event.

Tony Cook found and patched brokenness while defining mapped package
states with POE::Session->create.

Optimized POE::Kernel::run to reclaim the speed that was lost during
the queue split.  Time::HiRes' presence is required to enable a big
part of the reclaimed speed, but POE will do its best without it.  See
the FIFO_DISPATCH_TIME constant's comments for notes on tweaking
0.1002's performance higher than 0.1001's. :)


0.1001 2000.04.17
-----------------

MJD pointed out (heh) that references have string/number magic like
$!.  That is, they return just a number in numeric context, and in
fact they're are stored as numbers internally, so string context
wastes time making them look pretty in the first place.

Added POE::Preprocessor, a source filter for macro preprocessing,
constants, and enumerations.

Overhauled POE::Kernel's source.  Commented just about everything.
Broke apart some monolithic subroutines.  Replaced redundant code and
smaller internal subs with inline POE::Preprocessor macros.

Overhauled POE::Kernel's manpage SYNOPSIS.  Made the formatting a
little neater.  Made the parameter names a little clearer.  Explained
what's going on in greater detail.

(!!!) Removed the silly and long-depreciated $kernel->session_create
method.

(!!!) Split the debugging constants between assertions which die
noisily and traces that show ongoing activity.  Renamed them to
ASSERT_* and TRACE_* to reflect their function.

Added ASSERT_DEFAULT and TRACE_DEFAULT to change the defaults for
ASSERT_* and TRACE_*.  These let programs turn everything on with one
or two statements.

Set ASSERT_DEFAULT to true in t/*.t so the tests are more thorough.

Documented the ASSERT_* and TRACE_* constants.

Added t/03_aliases.t to test session aliases.

Added t/04_selects.t to test filehandle watchers.

Overhauled POE::Session's source.  Commented just about everything,
including the strange but true POE::Session->new() constructor.
Replaced redundant code and smaller internal subs with inline
POE::Preprocessor macros.

Overhauled POE::Session's manpage SYNOPSIS.  Made the formatting a
little neater.  Made the parameters a little clearer.  Explained
what's going on in greater detail.

Optimized away the recursion for redirecting unknown states to
_default in POE::Session::_invoke_state.  Programs that rely on
_default should run a bit faster without the extra function call.

Removed poing.perl from the samples directory.  It had evolved into a
separate program in its own right.  It's now available from the
author's page at <http://www.newts.org/~troc/poe-grams.html>.

Documented $kernel->fork() as experimental.

Added experimental postback features to POE::Session.

Un-depreciated $kernel->ID_session_to_id.  While
$kernel->alias_resolve does the same thing, ID_session_to_id can be
faster when code expects to be working with session IDs.


0.10 2000.03.23
---------------

Added POE::Component to the MANIFEST.  Whoops!

Everything from 0.0901 through 0.0910 is included in this public
CPAN release.  People using 0.09 should read through to see
what has changed, paying extra attention to the bits marked
incompatible.


0.0910 2000.03.09
-----------------

POE now keeps track of the file and line number where an event was
generated.  $session->option( default => 1 ) will report the line and
file, so you know where strange events came from.

(!!!) Add session ID to reference lookup from alias_resolve.
ID_id_to_session is depreciated.  The incompatibility here is that
session IDs take precedence over aliases, so sessions shouldn't be
aliased to numbers.

(!!!) Depreciated ID_session_to_id, since alias_resolve does the same
thing.  No warnings have been set yet, to give developers time to
react to the change.  [This depreciation is rescinded in 0.1001.]

Tweaked the Win32 support to eliminate some redefined sub warnings.


0.0909 2000.03.10
-----------------

Removing closures in 0.0907 re-broke code that expect $wheel->event()
to take immediate effect.  Changed the wheels to use references
instead of direct event names, so that anonymous coderefs could have
closures whose values can be changed from outside.


0.0908 2000.03.09
-----------------

Added logging to samples/poing.perl.  Now it records up and down times
to a tab-delimited file.

Added POE::Kernel::select_(pause|resume)_write, to pause and resume a
write select without bothering to maintain POE::Kernel's reference
counts on the filehandle.  Made POE::Wheel::ReadWrite use this instead
of POE::Kernel::select_write, which should improve performance a
little bit.

POE::Kernel::call was setting $! to 0 when it oughtn't.  $! now
properly reflects the status of POE::Kernel::call.

Removed the place-holder test that suggested people try the samples
directory.

Added t/01_sessions.t to test sessions (new and inline create) and
basic events (post, yield and call);

Added t/02_alarms.t to test delayed events (alarm, delay, alarm_add
and delay_add).

Added POE::Kernel::(alarm|delay)_add to post additional alarms to a
particular state.  Unlike POE::Kernel::(alarm|delay), these don't
clear existing alarms for the destination state.

Kicked off the POE::Component heirarchy with
POE::Component::Server::TCP (POE::Component is frequently abbreviated
as P::C in conversation but not in code).


0.0907 2000.03.02
-----------------

Revised Wheel::SocketFactory's internal states to eliminate closures
keeping instances from self-destructing at proper times.  This would
keep socket factories alive after their last outside references were
removed.

Updated documentation for POE::Kernel::alarm()


0.0906 2000.02.20
-----------------

(!!!) Revised Wheel::ReadWrite->put() to return true if the high
watermark is reached; false if it hasn't been.  ReadWrite->put() may
return true without a corresponding high or low watermark event.

Changed samples/watermarks.perl to use ReadWrite->put()'s return
value, as well as the high and low mark states.  Commented the program
while I was in it.

Adding the water mark code reintroduced the closure bug that was fixed
in version 0.0804.  Now it is fixed.  Yet again.

Changed how DEB_* are defined in POE::Kernel.  It's now possible to
override the debugging constants before the first POE::Kernel use.
This lets programs have access to POE::Kernel's debugging code without
requiring programmers to find Kernel.pm and edit it.

Fixed POE::Session's debugging constant to work like POE::Kernel's.

Documented POE::Kernel and POE::Session debugging flags in the
corresponding manpages.


0.0905 2000.02.20
-----------------

Changed Wheel::ReadWrite's baaaaad $self to be a listref instead of a
hashref.  It should run marginally faster without having to look
things up in a hash all the time.

Added statistics accessors to Driver::SysRW (it's the only one so
far), and added corresponding accesors to Wheel::ReadWrite.

Added HighState and LowState to Wheel::ReadWrite->event, so these
states can be redefined on the fly.

Documented Wheel::ReadWrite->set_(high|low)_mark; they weren't
documented up to 0.0904.

Expanded samples/poing.perl to accept different forms of host lines in
.rc files.  Now accepts "host ip_address" or "host hostname" or "host
ip_address alias".  It will look up the missing information when the
first two formats are used; it can totally bypass looking up names or
addresses when the last format is used.  And aliases can be more
meaningful than host names.

EINPROGRESS isn't provided by ActiveState's POSIX module.  It also
seems to be meaningless on MSWin32 systems.  Since it's pretty
important for non-blocking connect() otherwise, I added a dummy
constant for it when POE is running on MSWin32 platforms.  This
affects POE::Kernel and Wheel::SocketFactory, which should now
work better on Windows systems.

Added a watermarks test, samples/watermarks.perl.


0.0904 2000.02.16
-----------------

Replaced some lame hosts with some interesting routers in the
poing.perl sample.  For values of lame and interesting.  Added some
code to read configuration options from ~/.poingrc (or default to the
options after __END__) so I can change options to my heart's content
without annoying anyone.

Gabriel Kihlman <joshua.haninge.kth.se!gk> found a race in
SocketFactory's connect error detection.  Changed the way errors are
detected during connection, removing an entire state in the process.
People from Connecticut should let me know if this is a problem. :)

Added a brief note about _signal and _default signal-handling
semantics in POE::Session, with a pointer to the more comprehensive
POE::Kernel signal discussion.

Separated alarms from plain events.  Made the plain event queue FIFO;
the alarm queue time ordered.  Posting and dispatching events should
be faster, since they would not need to binary seek and insert.  This
turned out to be false, because the constant overhead of checking two
queues greatly offset any increased post/dispatch efficiency.  Backed
this "optimization" out.

Benchmarked several different "switch" implementations, only to find
out that if/elsif/else is fastest anyway.

(!!!) Added internal event types within POE::Kernel.  Posting _stop at
a session will not kill it anymore.

Fixed POE::Kernel->alarm() and POE::Kernel->delay() to make use of the
new internal event types.  Now these two functions can only discard
alarm events.  Documented the change.

Added POE::Kernel::queue_peek_alarms, which returns the pending alarm
events queued for the current session.

Updated samples/signals.perl to display pending alarms.


0.0903 2000.02.08
-----------------

Put the incomplete, experimental Win32 code back.  It appears to have
been working all along!  Please note, this is only for making
filehandles non-blocking; it doesn't fix signals or fork or anything.

Add Artur's high/low watermark patches to Wheel::ReadWrite.  This is a
higher level watermark than previous patches, and it's not confined to
a particular driver (which is moot at this point, since there's only
one driver).  It implements high- and low-water callbacks instead of
performing its own flow control.  Documented them but didn't include a
watermark sample in this release.  A sample will be in by 0.10.

(!!!) Changed drivers' flush() and put() methods' return values.  They
now return pending octets instead of objects.  ReadWrite's water marks
rely on this to make the marks meaningful.  Updated documentation.

Changed Driver::SysRW's internal object from a hashref to an listref.
This is a minor micro-optimization, which may offset the
micro-pessimization introduced during octet counting.


0.0902 2000.02.07
-----------------

Removed an underscore from the last change's version number in
Changes. :)

Abigail found a stupid bug in POE::Session->create's mishandling of
object_states.  Patch received and applied; testcase added to
samples/create.perl; bug fixed.


0.0901 2000.02.07
-----------------

Added InputFilter and OutputFilter to POE::Wheel::ReadWrite's
constructor parameters.  This allows a ReadWrite wheel to use
different disciplines for input and output.

Added &set_input_filter and &set_output_filter to
POE::Wheel::ReadWrite.  Now &set_filter changes both the input and
output filters.  &set_input_filter and &set_output_filter alter
individual filters independent of the other.

Fixed samples/fakelogin.perl to test changing individual filters.

Changed a bunch of diagnostics to print $session->ID instead of
$session.  Debugging will be slower (that's debugging for you), but it
will also be friendlier.  Everybody needs a friend while debugging,
right?


0.09 2000.01.25
---------------

Updated README with: new mailing list instructions, Windows
compatibility notes, removed POE2 notice.

All promises regarding the 0.09 feature/patch set have been met, and
the Changes since 0.08 are perhaps too long.  Bump the version to 0.09
and prepare for a CPAN release.


0.0808 2000.01.24
-----------------

0.0806 broke Filter::Reference; fix it, and move the inclusion of
Compress::Zlib to runtime.  Now there's no startup penalty for people
not using Zlib.


0.0807 2000.01.24
-----------------

Fix the release date for 0.0806 in the Changes file.

&Session::ID was removed for testing and never put back.  Put... the
function... BACK!


0.0806 2000.01.24
-----------------

Added the ability to compress referenced data passing through
Filter::Reference.  This doesn't break backward compatibility, but it
may mean strange behavior if both ends of a Filter::Reference
connection don't agree on the compression mode.

Added the ability to map package and object states to methods that are
named differently.  This adds new syntax to POE::Session's new() and
create() constructors, as well as POE::Kernel->state().  The new test
in samples/objmaps.perl exercises the code.

(!!!) The ability to map package and object states to methods has
uncovered a problem with POE::Session->create's object_states
parameter.  This previously accepted a hashref, which stringified the
object references.  Now it requires an array reference instead.  The
package_states parameter is also expected to be an array reference
now.

There seems to be renewed interest in Win32 support.  The previous
Win32 porting attempt was about a year ago, and it was never completed
or tested.  Since it's been so long, I've removed the code on the
assumption that a fresh start is better.  Patches welcome!

Added UDP support to SocketFactory.  This involved rewriting
&SocketFactory::new to be partially data driven; now it should be
easier to add new protocols and families.

Added UDP testing to samples/socketfactory.perl.

Addi found a bareword warning in samples/udp.perl; I renamed
$heap->{socket} to $heap->{socket_handle} to avoid it.

Michael Stevens (mstevens) found another $heap->{socket} bareword
warning in samples/poing.perl.

mstevens also reminded me that samples/poing.perl is running as root;
I added a -T switch to the #! line.  If poing.perl dies with a ``Too
late for -"t" option'' message, then you'll have to either remove the
-T from the #! line (not recommended) or run the script as:
/usr/bin/perl -T poing.perl

And mstevens pointed out that using -I.. on the #! line is a problem
in some Perl versions where POE otherwise runs fine.  I replaced the
-I.. switch with "use lib '..';", and things should be a lot happier.

And his ROWS and COLS environment variables really are LINES and
COLUMNS.  I fixed samples/poing.perl to recognize the alternate
environment variables and punt to 80 columns and/or 25 lines as a last
resort.


0.0805 2000.01.05
-----------------

Added a getsockname() method to SocketFactory.  This is used to find
out which address and/or port a listening SocketFactory is bound to.
Great for servers that create dynamic listening sockets, like DCC and
FTP.

Added code to samples/socketfactory.perl to display bind addresses
using $wheel->getsockname().

Made some minor cosmetic changes to SocketFactory.  This was to be a
clean rewrite of SocketFactory's internals so they could support new
protocols (like UDP), but time ran out.

Added samples/udp.perl to show how UDP sockets fit into the scheme of
things.  It's also to get me in the mood to support other protocols in
SocketFactory.

Fixed POE.pm's documentation to include new tests and samples.  These
are poing.perl (multi-host ping); udp.perl; and wheels2.perl
(two-handle ReadWrite).

Barring problems [crosses fingers], 0.0805 will be the last subversion
before 0.09.  SocketFactory revisions should appear in 0.0901.


0.0804 1999.12.31
-----------------

Reinstated the closure optimizations in the wheels.  They were removed
in version 0.0703.  It turns out that the closures are necessary to
prevent wheels from holding extra copies of their $self references.
The extra $self references kept them from self-destructing (Har!) in
Flushed states.  These closures work better than 0.0702's.

Wheel::FollowTail now wraps its seek() calls in eval blocks, in case
the tail being followed belongs to a pipe or otherwise unseekable
file.

Cleaned up some ugly style in the places where things changed.  Made
some other style ugly.


0.0803 1999.12.28
-----------------

Incorporated Kevin Lenzo's patch for Wheel::ReadWrite's support of
separate input and output filehandles.

SocketFactory's SuccessState and FailureState parameters can take
coderefs instead of state names, for quick one-off states and closure
tricks.  If this works and is generally useful, I'll add the feature
to other wheels.

Updated SocketFactory to return the remote address and port for
connecting sockets as well as accepted ones.  Updated the
socketfactory.perl sample program to display them.


0.0802 1999.12.25
-----------------

Fixed the date for revision 0.0801 in the changes.

Added Kernel and Session IDs, at Philip Gwyn's insistence.  Each
session has a serial number, accessible by $session->ID().  POE's
kernel itself has a fairly unique ID, accessible by $poe_kernel->ID().


0.0801 1999.12.24
-----------------

Added &POE::Kernel::fork() to provide safe child reaping.  This fork()
uses an event loop to poll for reapable children.  It fires a CHLD
signal at the session that called &POE::Kernel::fork(), using POE's
soft signals to avoid potential problems with Perl's signal handling.

Changed the preforkedserver.perl example to use &POE::Kernel::fork(),
but the sample program seems to be hideously broken as designed.

POE's SIGCHLD handler takes over Apache's when it's used in mod_perl.
Changed POE::Kernel to not register a SIGCHLD handler if it's running
under mod_perl.

Added SIGIDLE, a kinder, gentler SIGZOMBIE.  When an entire process
becomes idle, POE broadcasts SIGIDLE to everyone.  SIGIDLE is a plain
terminal signal; sessions won't die if it's handled.  POE checks for
continued idle-ness after SIGIDLE is dispatched; if the process hasn't
awakened, then SIGZOMBIE is broadcast to reap things.

Fixed names.perl to show SIGIDLE being caught.

Reordered the lookups in &POE::Kernel::alias_resolve, placing the more
common ones first.  Forced a look-up, even for Session references, so
that it would return ESRCH errors on sessions that disappeared but
were still being referenced.


0.08 1999.11.26
---------------

John Labovitz <watchguard.com!johnl> submitted a patch to change
Driver::SysRW's read block size.  He also pointed out that
Filter::Reference prefers to use freeze() instead of the more portable
nfreeze().  I applied a modified version of his block size patch, and
I changed Filter::Reference to prefer nfreeze().

There have been no complaints with the 0.07_xx subversions, and they
contain useful changes, so the version is bumped to 0.08.

Mentioned the "POE2" project in the README file.

Added an undocumented command line switch to samples/poing.perl that
specifies the maximum number of hours to run.

Changed the small/large queue limit for POE::Kernel::_enqueue_state
from 32 to 8.

Removed the hard requirement for optional modules: Storable;
Time::HiRes; HTTP::Request; HTTP::Response; HTTP::Status; URI::URL.
These aren't mandatory for basic POE things.


0.0704 1999.11.14
-----------------

Include some modules that were mistakenly left out of 0.0703.


0.0703 1999.08.20
-----------------

Removed closure optimizations from the Wheel classes.  The later
addition of $wheel->event() subtly broke them.

Added poing.perl, a multi-host ICMP ping program, to the samples
directory.  My ISP was down, so I hacked this together, "borrowing" a
lot of code from Net::Ping.  As such, it's neither friendly to
configure nor commented.

Sessions' "default" option didn't confess, contrary to the
documentation.


0.0702 1999.07.30
-----------------

Made BindAddress optional for UNIX client sockets.  It's still
required for server sockets.  Updated the documentation for the
change, fixed some typos, and included PF_INET and PF_UNIX.

Changed POE::Kernel::_enqueue_state from a linear search to a binary
search, but only if there are 32+ events in the queue.  Smaller queues
are still searched linearly, on assumption that it's quicker because
there's less overhead.


0.0701 1999.07.01
-----------------

Fixed a race or TCP/IP stack problem in SocketFactory.  SocketFactory
was firing a "connect error 0" if the server side sent data
immediately.  The problem was tested on four systems: Linux (broke);
Solaris (broke); FreeBSD (worked); OS/2 (worked).  Go figure.  It
should work on all four now.

Modified POE::Filter::HTTPD to respond with the protocol version
(hardcoded to 1.0).  The wget utility had a problem with 'HTTP ...',
and I assume it won't be the only thing to.

Replaced a regular expression in POE::Filter::Reference with a
substr() call.  The regexp was used to frame input streams, and large
structures (over 32KB) were not being framed correctly.  This was
fixed in a previous version, but the fix was reverted for some reason.
The new &get method code also supports 0-byte blocks, which is
pointless for a Reference filter, but lets you use Reference as a
"reference" for other variable-length block filters. :)


0.07 1999.06.18
---------------

Revised the new manpages based on reader feedback.

Bumped the version number to 0.07 and released it to the CPAN.  This
version contains all the changes, including one minor interface
change.  It's that change that warrants the (!!!) icon, so don't
panic.  This is NOT another 0.05 -> 0.06 API changefest of pain.


0.0609 1999.06.15
-----------------

Updated samples/*sessions.perl to test $kernel->state(...) and
discovered that the documentation was wrong about this function.
Thanks, Artur, for pointing this out.

Fixed the documentation for $kernel->state(...) with regards to
package and object sessions.

Made POE::Session an array reference, as part of the reorganization of
POE's internals.

Revised all the manpages.  Split the manpages into separate PODs, and
put them at the end of each module.  Rewnote the POE.pm overview,
added some ASCII art, and threw away the "Design Goals" and related
hype.  Removed POE-TODO and POE-HINTS manpages.

Updated the README to be more readable.  Moved the mailing list and
web site information there.  Should either or both change, stale
information won't rot in a thousand manpages around the world.

Removed design notes from the ends of Kernel and Session, because docs
go there now.  Moved them to POE-TODO, which is now not included.

&POE::Session::create was broken-- I'm not sure how it worked to begin
with.  Fixed.

Revised the POE::Filter::HTTPD documentation to follow the rest of the
manpages' format.

(!!!) Minor interface change.  &POE::Session::option can now fetch
session option values without changing or deleting them in the
process.

Changed $VERSION in POE.pm to not preserve the version's underscore.
This changes the archive name format, so I'll start referring to
versions without the underscore.  Joy.


0.06_08 1999.05.30
------------------

Begin reorganizing POE development.  The tests/ subdirectory is now
samples/.

Added POE-HINTS documentation.

Added POE::Curator, POE::Ojbect and POE::Runtime classes.  These
implement the start of the heretofore "Mythical" Object Layer.

Added samples/olayer.perl to test the current Object Layer features.
The object layer is in early development, so there's no documentation
outside the olayer.perl comments.

Applied Philip Gwyn's serialization patch to Filter::Reference.  Added
his serialization test as samples/ref-type.perl.  Updated
documentation for Filter::Reference to match patch.

Applied Philip Gwyn's updated patches for hot-swappable filters.
Added his filter swapping test as samples/filterchange.perl.  I have
much more confidence in this now that it's tested.

Updated documentation to point to the samples/ directory.

Fixed t/test.t to point to the samples/ directory.

Made dist on a FreeBSD system, so the permissions should be correct.


0.06_07 1999.05.12
------------------

"Crunch time" is sort of over.  An emergency in April put everything
on hold.  I had a lot of time away from working on POE, and I came
back refreshed and with some funky new ideas.  Unfortunately, it sort
of ruined my plans for releasing 0.07, and 0.07 is delayed until I
move development over to CVS.

&POE::Kernel::post() now returns undef for error.  The "success"
return value currently is 1, but this may change.  It's better right
now to check for definedness as success.  On error, $! will be set as
per &POE::Kernel::alias_resolve().

&POE::Kernel::call() has improved return values, similar to &post's.
See the docs.

&POE::Session::create is a new constructor, with some type checking.
It uses a completely different call signature.  See the docs.

Philip Gwyn's patches for hot-swappable filters are in.  They are
highly experimental and untested.  No guarantees, not even that
they'll exist in future releases.  Feedback would be appreciated.


0.06_06 1999.04.28
------------------

Added some defaults to SocketFactory: SocketDomain => AF_INET,
SocketType => SOCK_STREAM, SocketProtocol => 'tcp' (for INET sockets).

Changed SocketFactory semantics.  On Artur's insistence, SocketFactory
now uses RemoteAddress to determine the difference between connecting
and listening sockets.  ListenQueue now defaults to SOMAXCONN.  This
should not break existing programs.

The tests/*.perl programs have been updated to use SocketFactory in
recommended ways.

Added STATE to state (event handler) parameters.


0.06_05 1999.03.23
------------------

Wheel::ReadWrite would sometimes not fire an error event; fixed.

Added PREREQ_PM to Makefile.PL.  Theoretically, CPAN.pm will
automagically install all POE's prerequisites now.  For completeness,
PREREQ_PM requires more than basic POE does.


0.06_04 1999.03.17
------------------

Entering "crunch time" for the 0.07 release.  Expect a lot of quick,
small-fix releases.

Fixed documentation bug.  It said FROM instead of SENDER.

POE::Session and POE::Wheel::* check for a POE::Kernel reference as
the first parameter.  This will detect old code and croak with better
error messages.


0.06_03 1999.03.17
------------------

Incorrect parameters to &POE::Session::new could cause an infinite
loop.  Fixed.

Depreciated posting/calling $_[HEAP] instead of $_[SESSION].

Allow posting to stringified session references.

Sessions will carp on invalid states, if their 'debug' option is set
and they do not have a _default state registered.

Added an event() method to the wheels.  This lets programs change the
events they emit without having to destroy them outright and create
replacements.

Allow packed addresses in SocketFactory's parameters.

Documented the mailing list.

Fixed a race error in tests/proxy.perl.  It would die if the client
sent information before the server connection was made.


0.06_02 1999.02.20
------------------

Fixed POE documentation to stop being silly about => "stringifying"
things that it's not.  Sorry about that.

Updated tests/proxy.perl to queue data sent by the client before the
server connection is fully established.  Previously, the proxy would
try to call SocketFactory::put, and the proxy would die.  Whoops!

Updated SocketFactory to fail on unresolved hostnames.  Previously it
was relying on undef from Socket::sockaddr_in; now it checks the
inet_aton results.

Updated SocketFactory to generate FailureState on failure to connect.

Replaced SocketFactory's hard failures with FailureState events.

Fixed proxy.perl; it wasn't registering the proxy/server ReadWrite
wheel properly.

Assigned EADDRNOTAVAIL to $! if inet_aton fails in SocketFactory.  I
assumed inet_aton (gethostbyname, too) touch $! on failure.  Wrong!


0.06_01 1999.02.16
------------------

Added Kernel::session_create, a semantically sweeter version of C<new
POE::Session>, for people who prefer to think this way.

Added check for pre-packed INET addresses in Wheel::SocketFactory.
Previously it would try to inet_aton() them.

Added check for stringified session references in
Kernel::alias_resolve.  Now you can post/call to hash keys.

Added the event() method to existing POE::Wheel classes.  Now events
can be changed without destroying old wheels and creating new ones.

Made state redefinition warnings optional.  They will not appear
unless a session's 'debug' option is set.

Added tests/fakelogin.perl to test the event() method for ReadWrite.
The other wheels' event() methods are untested.  If they're broken,
let the author know.

Split the TO-DO list out of the main POE.pm file.


0.06 1999.02.03
---------------

This is a public CPAN release.  It incorporates all the changes since
version 0.05.


0.05_57 1999.02.02
------------------

(!!!) Renamed POE::Session::debug() as POE::Session::option(), per
feedback from testers.  This changes the original "_debug" semantics
into something like environment variables for sessions.

The ReadWrite wheel's InputState is optional.  This allows for
write-only wheels, which are good for writing logs.  The
followtail.perl test has been updated to use such a wheel for its log
writer sessions.

The FollowTail wheel now has an optional PollInterval parameter, which
tells how long to wait (in seconds) between checking the file for new
data.


0.05_56 1999.02.02
------------------

Crimson found the real cause of Perl's coredumps, which allowed the
0.05_54 change to be rolled back.


0.05_55 1999.02.01
------------------

(!!!) SIGWINCH is unsupported until Perl and/or POE implements safe
signals.  This signal was causing Perl to crash on xterm resizes.

(!!!) Sessions' "_debug" variables have been removed.  Instead,
POE::Session now has a debug() method.  This removes the _debug heap
pollution, and allows for several per-session debug flags.


0.05_54 1999.01.30
------------------

Backed out the change in 0.05_04 where wheels call their event
handlers directly.  This causes some sort of stupid closure or
destructor trick (we're still not sure which) that makes perl SEGV on
some systems.


0.05_52 1999.01.27
------------------

Added Win32 support for non-blocking sockets.  Unfortunately, the
Win32 port's select() doesn't appear to support regular files, so POE
is virtually useless for non-blocking filesystem work.  On the plus
side, sockets seem to function very well.  Thanks to Sean Puckett
(catbear) for tracking this down.


0.05_04 1999.01.15
------------------

Fixed Reference.pm again.  Storable's nfreeze is portable across
networks and faster than FreezeThaw, so it's preferred.  Thanks to
Artur Bergman for pointing this out.

(!!!) Changed _child parameters.  $from is always the kernel.  ARG0 is
either 'gain' if the parent is being given a child; 'lose' if its
child is being stopped; or 'create' if the new child was created by
this session.  ARG1 is always the child session's reference.  For
created sessions, ARG2 is the return value from the child's _start
event handler.

(!!!) Changed _parent parameters.  $from is always the kernel; ARG0 is
the old parent session; and ARG1 is the new parent session.

(!!!) Changed event handler parameter order, and introduced a way to
avoid future changes in the parameter order from breaking
compatibility.

Updated tests/*.perl examples to work with the new scheme of things.
Added comments, and generally cleaned things up.

Sessions' _start events may now include parameters.  The selects.perl
test is the first program to use this.

Wheels now call event handlers directly instead of posting events.
This should make things substantially faster.

(!!!) Changed filters' return values, to make them more compatible
with block and datagram protocols.  Most people won't notice the
difference, but this will break compatibility for Filter and Driver
writers.


0.05_03 1999.01.14
------------------

Fixed Kernel select dispatching.  Changing $_ in event handlers would
cause a fatal error.

Fixed Reference.pm.  Frozen references were not being thawed correctly
under two conditions: If packet boundaries split them in certain
places, and later if they contained \n.  Thanks to sky and a-mused for
finding this one.

(!!!) Fixed Kernel.pm signal handlers.  The kernel now waits on
SIGCHLD and only generates a CHLD signal event if the child PID is 0
or more.  The CHLD signal now includes the PID and $? as parameters.
The only programs that break are ones that explicitly wait.  It also
always generates SIGCHLD/SIGCLD events as "CHLD" to simplify handlers.

Fixed Kernel event dispatching so that events generated by select() no
longer outpace Kernel::run's ability to dispatch them.  Thanks to Dave
Paris for finding this.

Fixed SysRW.pm to flush as much data as possible all at once.  This
should reduce events and overhead when sending a lot of data.  Thanks
to Dave Paris for pointing this out.

Added new tests.


0.05_02 1999.01.12
------------------

Fixed signals.  Now runs garbage collection on sessions after
execution returns from non-terminal signal handlers.

Fixed README, Changes, etc. to be more readable.  I hope.

Added tests/thrash.perl to check for memory leaks and benchmark
"performance".

(!!!) Changed "exception" to "expedite", with regard to Kernel select
functions.

The thrash.perl results look pretty bad, and DProf blamed IO::Select,
so out it went.

Revised internal data structures to be more efficient.

(!!!) Removed support for multiple kernels, each to its own thread.
See the 0.05 SIGPIPE notes.

Rewrote documentation.  Split it from individual packages, and placed
it into its own pod file.

Added return values for Kernel::alias_* functions.

Localized $SIG{'__DIE__'} in "harmless" evals.

Inlined Kernel::_kernel_select().

Added Artur Bergman's support for "package" sessions, and
packagesessions.perl test.

(!!!) Fixed Filter::Line::put() to treat @_ as an array of lines.
This brings Filter::Line::put() into agreement with the documentation.

Added Filter::Stream, a "null" filter that passes data through
unchanged.

Added Kernel::yield.

Removed IO::Handle dependencies in the Kernel.  Now it will work with
plain old files as well.

Added return values for Kernel::state.

Created Wheel::SocketFactory, a replacement for IO::Socket::INET (tcp
only so far) and IO::Socket::UNIX.  All it does in create sockets,
though... the sockets don't have IO::Socket-style methods.

Made FreezeThaw the default for Filter::Reference, and issued a
mandatory warning if Storable is used.  Objects frozen with Storable
are not thawable on different-endian systems.


0.05 1998.12.04
---------------

Delayed garbage collection on new sessions.  Previously, sessions
would be tested for garbage collection immediately after creation.

Fixed a fatal bug in tests/proxy.perl.  Added ability to redirect
multiple ports.  Added more logging information.

Fixed SIGPIPE handling.  Previously, SIGPIPE would be dispatched to
every Session.  Now it is dispatched directly to the session that was
running when the signal occurred.  This probably breaks multithreaded
programs that contain multiple kernels, and I am considering dropping
multi-kernel support.

Fixed SIGRTMIN handling.  At least one system has this signal defined
in %SIG but doesn't support it.  Assigning to $SIG{'RTMIN'} there
causes an "Attempt to free unreferenced scalar" warning, and the test
program hangs.  POE now skips RTMIN and RTMAX when assigning handlers.

Added Filter::Reference, contributed by Artur Bergman
<artur@vogon-solutions.com>.  Filter::References enables POE to pass
copies of referenced data between processes.  It requires C<Storable>
or C<FreezeThaw>.

Fixed Wheel::ReadWrite::put().  It used to send a concatenated version
of @_ to its driver.  This broke Filter::Reference when putting a list
of references.  Now it's up to respective Filter classes to do the
right thing with @_.

Fixed Wheel::ReadWrite.  Now it sends FlushedState events when it
should.


0.04 1998.11.24
---------------

Added $object->can($state) check when registering object methods as
states/event handlers.

Added Session aliases (symbolic references).  See tests/names.perl for
an example.

Added Kernel::signal($session, $name).  This sends signals directly to
POE::Sessions or POE::Kernels without going to the operating system
(which would send the signal to every kernel and session).  The
signals.perl test has been updated to test this.

Added Kernel::call().  Takes the same parameters as Kernel::post, but
dispatches the state/event immediately.  Returns whatever the event
handler did.  The sessions.perl test test has been updated to test
this.


0.031 1998.11.24
----------------

Added tests/objsessions.perl to the manifest.  D'oh!


0.03  1998.11.23
----------------

Added new constructor syntax to POE::Session.  It's now possible to
say: new POE::Session($kernel, $object, \@methods).  See
tests/objsession.perl for an example.

Removed an unnecessary function call in Kernel.pm.

Rearranged Changes so the most recent ones come first.


0.02  1998.11.22
----------------

Rewrote signals.  Signals now propagate from parent to child sessions.
"Terminal" signals now only kill sessions that don't otherwise handle
them.

Added subsecond resolution for alarms if Time::HiRes is available.
See the docs for POE::Kernel::alarm().

Added POE::Kernel::delay() for "time() + $seconds" alarms.  Uses
Kernel's time(), which may be from Time::HiRes.

Parent sessions will now wait around until all child sessions finish,
unless they're explicitly killed off.

Fixed a blessing bleed that caused implicitly returned objects to die
in the wrong scope (confounding resource management).

Added tests/proxy.perl, a simple line-based proxy example.


0.01  1998.08.15
----------------

Initial release.  Implemented Kernel, Session, Wheel, Driver, Filter.


- EOF: Thank you for reading. -
